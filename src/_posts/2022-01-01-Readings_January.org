---
layout: default
title: Readings January 2022
summary: Things I read in January 2022
---

I've decided note down the things I read every month - especially those I find interesting.

Each item has a summary along with it, as well as tags, depending on what it is related to. A 📝 marks a paper,
a 📚 marks a book, and 🌐 represents a site/blog.

It isn't uncommon for me to skim something, rather than reading it thoroughly. This gives me an idea
of the topic at hand, but not in-depth knowledge. I note them here, marked with a ⏩ sign.

This page will grow week-by-week till February, when I will start another page.


    - 📚 ⏩ *[[https://www.goodreads.com/book/show/112252.Types_and_Programming_Languages][Types and Programming Languages]]*  \\
      This book, roughly, defines what type is, and tells how types are useful. This is followed by instructions
      of how to define the syntax and semantics of languages, and how to type languages. I only read this upto
      7-8 chapters - most of the content has already been covered in my undergraduate courses.
      /[tags:types, programming-languages]/

      
    - 🌐 *[[https://chaidarun.com/ten-years-of-logging-my-life][Ten Years of Logging My Life]]* \\
      An interesting blog post on recording day-to-day patterns and analyzing them.
      /[tags:self-improvement, logging]/

      
    - 🌐 ⏩ *[[http://notebook.kulchenko.com/programming/lua-good-different-bad-and-ugly-parts][Lua: Good, bad, and ugly parts]]* \\
      A blog post on various aspects of Lua - I don't know the language yet, but I read it to see if I want to learn it, or not.
      I think I do.
      /[tags:programming-languages, lua, learning]/

      
    - 🌐 ⏩ *[[https://marc.info/?l=git&m=124111702609723&w=2][Why git is so fast]]* \\
      Some of the optimizations git makes. Has special focus on why C is the language of choice (rather than, say, Java).
      /[tags:programming-languages, optimization, git, learning]/

      
    - 🌐 *[[https://outerproduct.net/2021-02-13_att-asm.html][Why no one should use the AT&T syntax ever, for any reason, under any circumstances]]*\\
      An opinion piece on why AT&T assembly syntax is confusing and poorly designed. A fun read.
      /[tags:assembly, rant]/


    - 📚 *[[https://www.goodreads.com/book/show/25135194-prisoners-of-geography][Prisoners of Geography]]* \\
      A book I received as a gift - on geopolitics. It explains, in layperson terms, the complex political situations of various countries. Of course, as
      you might have figured out, there's special focus on how geography plays a part in influencing the actions of every nation. This book
      was a great read, and a great gift from [[https://github.com/santwanav/][Santwana]].
      /[tags:geography, politics, learning]/


    - 🌐 *[[https://www.redblobgames.com/pathfinding/a-star/introduction.html][Introduction to the A* Algorithm]]* \\
      An interactive blog post about A* pathfinding algorithm, and comparing it to BFS and Djikstra's algorithm. This is
      specifically in relation to making games, maybe why I enjoyed so much.
      /[tags:game-making, algorithms, learning]/


    - 🌐 ⏩ *[[http://theory.stanford.edu/~amitp/GameProgramming/MapRepresentations.html][Map representations]]* \\
      A blog post about how to split up maps into nodes and edges, and navmeshing - so the above algorithms can be applied. Tradeoffs
      between path quality, speed are discussed. Again, this was sprcifically in relation to making games.
      /[tags:game-making, learning, algorithms]/
    

    - 🌐 *[[https://www.cuesta.edu/student/resources/ssc/study_guides/reading_comp/305_read_text.html][How To Read A Textbook]]* \\
      An article describing a way to read textbooks for maximum retention - this was specifically focused on tests,
      not just reading for the sake of reading. The article derives from a very old 1941 paper, and it seemed a bit
      _too_ test focused for me. But still, it may be worth a go.
      /[tags:learning, self-improvement]/


    - 🌐 *[[https://fly.io/blog/the-5-hour-content-delivery-network/][The 5-hour CDN]]* \\
      An article describing how CDNs work by way of instructing the reader of a simple way to make one. I was introduced
      to several concepts in this article - traffic direction to nearby servers, layered CDN, etc.
      /[tags:learning, cdn, web-server]/


    - 🌐 ⏩ *[[https://portswigger.net/research/practical-web-cache-poisoning][Practical Web Cache Poisoning]]* \\
      A /very/ in-depth look at cache poisoning with several exploits detailed along with the basic idea of cache poisoning.
      I read it to get a basic idea of what a cache poisoning attack looks like - and I also enjoyed skimming through the
      more complex exploits, though I did not understand them all.
      /[tags: learnning, security, cache-poisoning]/

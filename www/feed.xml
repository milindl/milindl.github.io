<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="/www/feed.xml" rel="self" type="application/atom+xml" /><link href="/www/" rel="alternate" type="text/html" /><updated>2022-02-01T22:27:08+05:30</updated><id>/www/feed.xml</id><title type="html">Milind‚Äôs Writeups</title><subtitle>Personal blog of Milind Luthra. All opinions here are my own.
</subtitle><entry><title type="html">Readings January 2022</title><link href="/www/2022/01/01/Readings_January.html" rel="alternate" type="text/html" title="Readings January 2022" /><published>2022-01-01T00:00:00+05:30</published><updated>2022-01-01T00:00:00+05:30</updated><id>/www/2022/01/01/Readings_January</id><content type="html" xml:base="/www/2022/01/01/Readings_January.html">&lt;p&gt;I&amp;#8217;ve decided note down the things I read every month - especially those I find interesting.&lt;/p&gt;
&lt;p&gt;Each item has a summary along with it, as well as tags, depending on what it is related to. A üìù marks a paper,
  a üìö marks a book, and üåê represents a site/blog.&lt;/p&gt;
&lt;p&gt;It isn&amp;#8217;t uncommon for me to skim something, rather than reading it thoroughly. This gives me an idea
  of the topic at hand, but not in-depth knowledge. I note them here, marked with a ‚è© sign.&lt;/p&gt;
&lt;p&gt;This page will grow week-by-week till February, when I will start another page.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;üìö ‚è© &lt;b&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/112252.Types_and_Programming_Languages&quot;&gt;Types and Programming Languages&lt;/a&gt;&lt;/b&gt;  &lt;br /&gt;
    This book, roughly, defines what type is, and tells how types are useful. This is followed by instructions
    of how to define the syntax and semantics of languages, and how to type languages. I only read this upto
    7-8 chapters - most of the content has already been covered in my undergraduate courses.
    &lt;i&gt;[tags:types, programming-languages]&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
  &lt;li&gt;üåê &lt;b&gt;&lt;a href=&quot;https://chaidarun.com/ten-years-of-logging-my-life&quot;&gt;Ten Years of Logging My Life&lt;/a&gt;&lt;/b&gt; &lt;br /&gt;
    An interesting blog post on recording day-to-day patterns and analyzing them.
    &lt;i&gt;[tags:self-improvement, logging]&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
  &lt;li&gt;üåê ‚è© &lt;b&gt;&lt;a href=&quot;http://notebook.kulchenko.com/programming/lua-good-different-bad-and-ugly-parts&quot;&gt;Lua: Good, bad, and ugly parts&lt;/a&gt;&lt;/b&gt; &lt;br /&gt;
    A blog post on various aspects of Lua - I don&amp;#8217;t know the language yet, but I read it to see if I want to learn it, or not.
    I think I do.
    &lt;i&gt;[tags:programming-languages, lua, learning]&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
  &lt;li&gt;üåê ‚è© &lt;b&gt;&lt;a href=&quot;https://marc.info/?l=git&amp;amp;m=124111702609723&amp;amp;w=2&quot;&gt;Why git is so fast&lt;/a&gt;&lt;/b&gt; &lt;br /&gt;
    Some of the optimizations git makes. Has special focus on why C is the language of choice (rather than, say, Java).
    &lt;i&gt;[tags:programming-languages, optimization, git, learning]&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
  &lt;li&gt;üåê &lt;b&gt;&lt;a href=&quot;https://outerproduct.net/2021-02-13_att-asm.html&quot;&gt;Why no one should use the AT&amp;amp;T syntax ever, for any reason, under any circumstances&lt;/a&gt;&lt;/b&gt;&lt;br /&gt;
    An opinion piece on why AT&amp;amp;T assembly syntax is confusing and poorly designed. A fun read.
    &lt;i&gt;[tags:assembly, rant]&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
  &lt;li&gt;üìö &lt;b&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/25135194-prisoners-of-geography&quot;&gt;Prisoners of Geography&lt;/a&gt;&lt;/b&gt; &lt;br /&gt;
    A book I received as a gift - on geopolitics. It explains, in layperson terms, the complex political situations of various countries. Of course, as
    you might have figured out, there&amp;#8217;s special focus on how geography plays a part in influencing the actions of every nation. This book
    was a great read, and a great gift from &lt;a href=&quot;https://github.com/santwanav/&quot;&gt;Santwana&lt;/a&gt;.
    &lt;i&gt;[tags:geography, politics, learning, non-fiction]&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
  &lt;li&gt;üåê &lt;b&gt;&lt;a href=&quot;https://www.redblobgames.com/pathfinding/a-star/introduction.html&quot;&gt;Introduction to the A&lt;/b&gt; Algorithm&lt;/a&gt;* &lt;br /&gt;
    An interactive blog post about A* pathfinding algorithm, and comparing it to BFS and Djikstra&amp;#8217;s algorithm. This is
    specifically in relation to making games, maybe why I enjoyed so much.
    &lt;i&gt;[tags:game-making, algorithms, learning]&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
  &lt;li&gt;üåê ‚è© &lt;b&gt;&lt;a href=&quot;http://theory.stanford.edu/~amitp/GameProgramming/MapRepresentations.html&quot;&gt;Map representations&lt;/a&gt;&lt;/b&gt; &lt;br /&gt;
    A blog post about how to split up maps into nodes and edges, and navmeshing - so the above algorithms can be applied. Tradeoffs
    between path quality, speed are discussed. Again, this was sprcifically in relation to making games.
    &lt;i&gt;[tags:game-making, learning, algorithms]&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
  &lt;li&gt;üåê &lt;b&gt;&lt;a href=&quot;https://www.cuesta.edu/student/resources/ssc/study_guides/reading_comp/305_read_text.html&quot;&gt;How To Read A Textbook&lt;/a&gt;&lt;/b&gt; &lt;br /&gt;
    An article describing a way to read textbooks for maximum retention - this was specifically focused on tests,
    not just reading for the sake of reading. The article derives from a very old 1941 paper, and it seemed a bit
    &lt;span style=&quot;text-decoration:underline;&quot;&gt;too&lt;/span&gt; test focused for me. But still, it may be worth a go.
    &lt;i&gt;[tags:learning, self-improvement]&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
  &lt;li&gt;üåê &lt;b&gt;&lt;a href=&quot;https://fly.io/blog/the-5-hour-content-delivery-network/&quot;&gt;The 5-hour CDN&lt;/a&gt;&lt;/b&gt; &lt;br /&gt;
    An article describing how CDNs work by way of instructing the reader of a simple way to make one. I was introduced
    to several concepts in this article - traffic direction to nearby servers, layered CDN, etc.
    &lt;i&gt;[tags:learning, cdn, web-server]&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
  &lt;li&gt;üåê ‚è© &lt;b&gt;&lt;a href=&quot;https://portswigger.net/research/practical-web-cache-poisoning&quot;&gt;Practical Web Cache Poisoning&lt;/a&gt;&lt;/b&gt; &lt;br /&gt;
    A &lt;i&gt;very&lt;/i&gt; in-depth look at cache poisoning with several exploits detailed along with the basic idea of cache poisoning.
    I read it to get a basic idea of what a cache poisoning attack looks like - and I also enjoyed skimming through the
    more complex exploits, though I did not understand them all.
    &lt;i&gt;[tags: learning, security, cache-poisoning]&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;üåê &lt;b&gt;&lt;a href=&quot;https://viralinstruction.com/posts/defense/&quot;&gt;In defense of complicated programming languages&lt;/a&gt;&lt;/b&gt; &lt;br /&gt;
    An article on why languages evolve to have &amp;#8220;complex&amp;#8221; abstractions - because if we didn&amp;#8217;t have these abstractions, it leads
    to ad-hoc versions of these abstractions coming up in code anyway. Complex abstractions also help in increasing the ratio
    of issues found at compile time, to issues found at run time.
    &lt;i&gt;[tags: programming, learning, complexity]&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
  &lt;li&gt;üìö &lt;b&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/35657708-how-to-build-a-car&quot;&gt;How to Build a Car&lt;/a&gt;&lt;/b&gt; &lt;br /&gt;
    An autobiography of Adrian Newey - the man behind the design of many, &lt;i&gt;many&lt;/i&gt; championship winning Formula 1 cars. He provides an
    insider&amp;#8217;s view of the F1 circus, stories from his life, and easily digestible bits of many of his innovative designs.
    &lt;i&gt;[tags: autobiography, formula-1, non-fiction]&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
  &lt;li&gt;üìö &lt;b&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/7061.The_No_1_Ladies_Detective_Agency&quot;&gt;The No.1 Ladies&amp;#8217; Detective Agency&lt;/a&gt;&lt;/b&gt; &lt;br /&gt;
    A fun read about Botswana&amp;#8217;s only detective agency run by women - set in Botswana of I don&amp;#8217;t know how many years. I can&amp;#8217;t make out
    whether it&amp;#8217;s the 1960s, or the 1900s, but the book is an engaging read, and the characters drew me in.
    &lt;i&gt;[tags: fiction, detective]&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
  &lt;li&gt;üìö ‚è© &lt;b&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/50805762-the-guide-to-lucknow&quot;&gt;The Guide to Lucknow&lt;/a&gt;&lt;/b&gt; &lt;br /&gt;
    A book over 100 years old detailing the notable locations in and around Lucknow, providing a blow-by-blow narration of the effects
    and events of 1857 sepoy mutiny in Lucknow, and recent history (recent, from the perspective of the book. So from the 1600s or so).
    I skimmed through a large part of it because it was like reading a fact-sheet, and quite repetitive. Also, it really puts into
    perspective how much the time and environment of publication influences who literature portrays as the &amp;#8220;good guys&amp;#8221; (in this case,
    the colonial government are portrayed as &amp;#8220;good&amp;#8221; and &amp;#8220;brave&amp;#8221;).
    &lt;i&gt;[tags: history, non-fiction, lucknow]&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">I&amp;#8217;ve decided note down the things I read every month - especially those I find interesting.</summary></entry><entry><title type="html">Visualizing my browsing history</title><link href="/www/2021/11/18/Visualizing_my_browsing_history.html" rel="alternate" type="text/html" title="Visualizing my browsing history" /><published>2021-11-18T00:00:00+05:30</published><updated>2021-11-18T00:00:00+05:30</updated><id>/www/2021/11/18/Visualizing_my_browsing_history</id><content type="html" xml:base="/www/2021/11/18/Visualizing_my_browsing_history.html">&lt;p&gt;&lt;img src=&quot;/www/assets/img/history_overview.png&quot; alt=&quot;/www/assets/img/history_overview.png&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;Motivation&lt;/h1&gt;
&lt;p&gt;Can you remember the flow of your ideas?&lt;/p&gt;
&lt;p&gt;How do they originate, how they progress, and what do they end up as?&lt;/p&gt;
&lt;p&gt;I can&amp;#8217;t. I don&amp;#8217;t even remember how I had this idea of visualizing my
  browsing history.&lt;/p&gt;
&lt;p&gt;But I &lt;i&gt;can&lt;/i&gt; know the flow of my Internet history.
  I &lt;i&gt;can&lt;/i&gt; tell how I end up finding interesting sites, I &lt;i&gt;can&lt;/i&gt;
  tell how my browsing habits look like.&lt;/p&gt;
&lt;p&gt;Do I always start typing some known URLs, or do I jump deep from site to site?
  Are there sites I always &amp;#8220;end up&amp;#8221; on?&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;While the original idea - of tracking flow from URL to URL - is a good idea,
  it&amp;#8217;s not a good visualization. To give you an idea, the graph for my history would have 120,000+ nodes.
  And that&amp;#8217;s A LOT OF NODES!&lt;/p&gt;
&lt;p&gt;So rather than tracking flow from URL to URL, I decided to track the flow from
  host to host.&lt;/p&gt;
&lt;p&gt;I decided to use &lt;b&gt;R&lt;/b&gt;, with which I have only a passing familiarity.&lt;/p&gt;
&lt;h1&gt;Getting the Data&lt;/h1&gt;
&lt;p&gt;For the graph I had in mind, I needed data which looked like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;to: milindl.org, from: google.com, times: 20
to: google.com, from: facebook.com, times: 10
to: facebook.com, from: twitter.com, times: 5
(...continued)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this structure of the data in mind, I set out to extract it from my browser.&lt;/p&gt;
&lt;p&gt;I primarily use Firefox, and Firefox stores my browsing history in a SQLite
  database - &lt;code&gt;places.sqlite&lt;/code&gt;. It&amp;#8217;s made per-profile, and for my Windows machine,
  it was located at
  &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;\AppData\Roaming\Mozilla\Firefox\Profiles\&amp;lt;profile name&amp;gt;\places.sqlite&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can locate your own &lt;code&gt;places.sqlite&lt;/code&gt; file using the instructions given &lt;a href=&quot;https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data&quot;&gt;here&lt;/a&gt; -
  only if you&amp;#8217;re using Firefox like me. The entire process of getting the data if you&amp;#8217;re using Chrome will be different (and not documented here).&lt;/p&gt;
&lt;p&gt;To keep my browing history database safe from any corruption, I made a copy to work on:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbConnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RSQLite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SQLite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C:/Users/Milind/Documents/places_snapshot.sqlite&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The schema of the database is available &lt;a href=&quot;https://wiki.mozilla.org/images/d/d5/Places.sqlite.schema3.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The table &lt;code&gt;moz_places&lt;/code&gt; contains a list of all pages I&amp;#8217;ve ever visited, along with some data about each page (including the hostname).
  However, it doesn&amp;#8217;t maintain any information about the time(s) I have visited a page.
  No matter how many times I visit milindl.org, it appears only once in &lt;code&gt;moz_places&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The table &lt;code&gt;moz_historyvisits&lt;/code&gt; contains information about every visit to a page:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;an id - a numeric primary key&lt;/li&gt;
  &lt;li&gt;a reference &lt;code&gt;place_id&lt;/code&gt; which helps me get details about the page visited - a foreign key to &lt;code&gt;moz_places&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;a reference &lt;code&gt;from_visit&lt;/code&gt; to the previous &amp;#8220;visit&amp;#8221; from which I came to this &amp;#8220;visit&amp;#8221; - a foreign key to &lt;code&gt;moz_historyvisits&lt;/code&gt; itself&lt;/li&gt;
  &lt;li&gt;a &lt;code&gt;visit_type&lt;/code&gt;, an integer which determines how I ended up on this page&lt;/li&gt;
  &lt;li&gt;timestamp, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It took some additional code reading to understand what each &lt;code&gt;visit_type&lt;/code&gt;
  corresponded to - each corresponds to a transition type, found in the file
  &lt;a href=&quot;https://hg.mozilla.org/mozilla-central/file/tip/toolkit/components/places/nsINavHistoryService.idl#l946&quot;&gt;nsINavHistoryService.idl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are (for the most part) two ways I might visit a page. Either I click on a link which leads to that page,
  or else I type the URL of the page into the address bar of the browser manually.&lt;/p&gt;
&lt;p&gt;Clicking a link corresponds to a &lt;code&gt;visit_type&lt;/code&gt; of &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Typing the URL corresponds to a &lt;code&gt;visit_type&lt;/code&gt; of &lt;code&gt;2&lt;/code&gt;. For this &lt;code&gt;visit_type&lt;/code&gt;, no &lt;code&gt;from_visit&lt;/code&gt; is stored because I did not come from a previous visit.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s look at an example for this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;I type &amp;#8220;http://www.milindl.org/xyz&amp;#8221; into the address bar.&lt;/li&gt;
  &lt;li&gt;I click on a link on the page in (1) which points to &amp;#8220;http://www.example.com&amp;#8221;.&lt;/li&gt;
  &lt;li&gt;I click on a link on the page in (2) which points back to &amp;#8220;http://www.milindl.org/xyz&amp;#8221;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That sequence would generate the following data:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/www/assets/img/moz_places_illustration.png&quot; alt=&quot;/www/assets/img/moz_places_illustration.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Note that the hostnames are stored in the &lt;code&gt;moz_places&lt;/code&gt; table in the &lt;code&gt;rev_host&lt;/code&gt; column - and they&amp;#8217;re
  reversed. So, to get the actual hostnames, we need to reverse them later.&lt;/p&gt;
&lt;p&gt;Putting this information together, we need two queries to get the data.&lt;/p&gt;
&lt;p&gt;First, a query to get the list of all pages I have visited by clicking links. In this case, both
  &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; are available in the tables.&lt;/p&gt;
&lt;p&gt;We extract both the source (where I clicked the link) and target (the page I
  ended up on after clicking the link).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbSendQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;select p1.rev_host as target_host, p2.rev_host as source_host &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;                   from moz_historyvisits h1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;                   join moz_historyvisits h2 on h1.from_visit == h2.id and h1.visit_type == 1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;                   join moz_places p1 on h1.place_id == p1.id&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;                   join moz_places p2 on h2.place_id == p2.id&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;                   order by h1.visit_date desc;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbFetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, a query to get a list of all the pages I have visited by typing them in
  the address bar.&lt;/p&gt;
&lt;p&gt;In this case, Firefox doesn&amp;#8217;t save a source, so we use the a constant source,
  &amp;#8220;new_tab&amp;#8221;. So, every page visited by typing the URL in the address bar has its &lt;code&gt;from&lt;/code&gt;
  set as &amp;#8220;new_tab&amp;#8221;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbSendQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;select p1.rev_host as target_host, \&amp;quot;bat_wen\&amp;quot; as source_host&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    from moz_historyvisits h1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    join moz_places p1 on h1.place_id == p1.id&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    where h1.visit_type == 2&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    order by h1.visit_date desc;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbFetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that I have reversed &amp;#8220;new_tab&amp;#8221; in the above query - that&amp;#8217;s to make
  it identical to the other hosts we are fetching, so we can reverse them together.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Merge and clean the data.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rbind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stri_reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stri_reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;source_host&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;target_host&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#8217;s the result:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; head(t)
          source_host         target_host
1         .igraph.org         .igraph.org
2  .music.youtube.com  .music.youtube.com
3 .cran.r-project.org .mirrors.dotsrc.org
4 .cran.r-project.org         .ftp.fau.de
5  .www.r-project.org .cran.r-project.org
6  .www.r-project.org .cran.r-project.org
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We haven&amp;#8217;t yet aggregated the data, so there are repeated entries. We will do that later in this post.&lt;/p&gt;
&lt;h1&gt;Converting it to a Graph&lt;/h1&gt;
&lt;p&gt;R has a few handy packages/primitives that help us convert this data
  into a directed graph.&lt;/p&gt;
&lt;p&gt;But there is a problem - since we haven&amp;#8217;t yet aggregated the data, there are repeated entries, which will
  lead to multiple edges from the same source to the same target.&lt;/p&gt;
&lt;p&gt;This looks quite bad - rather than multiple edges from one host to another, I would
  want to show a thicker/darker edge.  So, for now, we remove all the duplicate edges.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;graph_from_data_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove.loops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to calculate edge weights - we need to count how many duplicate edges
  were there in the original graph.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as.data.frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get.edgelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as.data.frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FUN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Group.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Group.2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;V1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;colnames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as.data.frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#8217;s the result:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; tail(agg)
                    source              target weight
3604               new_tab        .zerodha.com     66
3605       .www.google.com .zerodha.quicko.com      1
3606  .www.ycombinator.com           .zinc.com      1
3607      .support.zoom.us            .zoom.us      1
3608     .kite.zerodha.com             .zrd.sh      1
3609 .news.ycombinator.com   .zwischenzugs.com      1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need to assign this value to the actual edges of the graph we are planning to
  plot. (The code for this turned out to be a bit of a mess, and I&amp;#8217;m sure there&amp;#8217;s
  a better way to do it.)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sapply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as.character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ends&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tgt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as.character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ends&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tgt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,]&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;as.integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ifelse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Plotting the Graph&lt;/h1&gt;
&lt;p&gt;We should make a few more adjustments to make the graph nicer.&lt;/p&gt;
&lt;p&gt;First, we need to convert the weights of the edges into two values - one, the
  thickness of the edge drawn on screen, and second, the color.&lt;/p&gt;
&lt;p&gt;The edge weight distribution is quite skewed - there are a lot of edges weighted
  just 1 or 2, and then a few which are in the thousands.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;Min.&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qu.&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Median&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Mean&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qu.&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Max.&lt;/span&gt; 
   &lt;span class=&quot;m&quot;&gt;1.00&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;1.00&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;1.00&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;10.71&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;2.00&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3613.00&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It wouldn&amp;#8217;t be a good idea at all to directly use this for the thickness, since
  a 3613 pixel thick edge would not be very nice to look at.&lt;/p&gt;
&lt;p&gt;We can&amp;#8217;t even scale it linearly - the less weighted edges would disappear.&lt;/p&gt;
&lt;p&gt;So the only way I could think of was to scale them using a log function. Once I
  had that in place, I played with the constants to make it look right.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;data.frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, the color needs to be set, as well. The idea is similar - the thicker
  the edge, the darker it will be. An extra &lt;code&gt;pmin&lt;/code&gt; ensures that we don&amp;#8217;t end up with
  edges which are completely white or too light colored, since we&amp;#8217;re using a white
  background.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scaled_weights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv_c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scaled_weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that&amp;#8217;s it! The next step is to actually, finally, plot the graph. I experimented
  with &lt;code&gt;igraph&lt;/code&gt; and &lt;code&gt;qgraph&lt;/code&gt; to plot the graph, and settled on using &lt;code&gt;qgraph&lt;/code&gt;
  I could not make &lt;code&gt;igraph&lt;/code&gt; lay out my nodes in a good way.&lt;/p&gt;
&lt;p&gt;I needed to play with the &lt;code&gt;repulsion&lt;/code&gt; - a higher value of repulsion leads to
  more clustering of nodes, and that led to a lot of overlapping nodes. You can
  read more about it at the &lt;a href=&quot;https://cran.r-project.org/web/packages/qgraph/qgraph.pdf&quot;&gt;qgraph documentation.&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;15000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;15000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;abc.png&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qgraph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;qgraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get.edgelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;border.width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repulsion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;edge.width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;edge.color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dev.off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/www/assets/img/history_overview.png&quot; alt=&quot;/www/assets/img/history_overview.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The first thing I saw was that most of the time, rather than going from site to
  site to site, I rather have a few &amp;#8220;origins&amp;#8221;, from where I visit a multitude of
  sites.&lt;/p&gt;
&lt;p&gt;The graph is much &lt;i&gt;broader&lt;/i&gt; than it is &lt;i&gt;deep&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;Which are these &amp;#8220;origins&amp;#8221;?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/www/assets/img/history_origin.png&quot; alt=&quot;/www/assets/img/history_origin.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The most natural &amp;#8220;origin&amp;#8221; is the new_tab page - the cases where I have manually
  typed the URL. The other most common origins are google, and hacker news.&lt;/p&gt;
&lt;p&gt;That means most of my browsing &lt;i&gt;starts&lt;/i&gt; at these sites - and in most cases, the
  history is just one or two levels deep.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/www/assets/img/history_wiki.png&quot; alt=&quot;/www/assets/img/history_wiki.png&quot; /&gt;
  A lot of paths end up on Wikipedia.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/www/assets/img/history_reddit.png&quot; alt=&quot;/www/assets/img/history_reddit.png&quot; /&gt;
  Once I get to reddit, I find it difficult to leave (see the big self-arrow?)&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Please Use GDB</title><link href="/www/2017/09/06/Please_use_gdb.html" rel="alternate" type="text/html" title="Please Use GDB" /><published>2017-09-06T00:00:00+05:30</published><updated>2017-09-06T00:00:00+05:30</updated><id>/www/2017/09/06/Please_use_gdb</id><content type="html" xml:base="/www/2017/09/06/Please_use_gdb.html">&lt;p&gt;&lt;i&gt;What this is not&lt;/i&gt;: a complete guide to &lt;code&gt;gdb&lt;/code&gt;. There are plenty of those
  online.
  This is primarily an opinion/experience piece on why &lt;i&gt;I&lt;/i&gt; find &lt;code&gt;gdb&lt;/code&gt; to be essential. There
  is &lt;i&gt;some&lt;/i&gt; usage instruction, but that is to enable anyone to follow along.&lt;/p&gt;
&lt;p&gt;The first programming language - or indeed, even the second one - I learnt
  was not C/C++. I never had to allocate any memory manually, or face any
  of those pesky segmentation faults. I had my friend the trusty GC with me,
  and I was happy. I first learnt C by bits-and-pieces &amp;#8211; in school, online, and finally, as a
  part of my academic curriculum at IIT Kanpur. At all those times, I found it
  to be tedious, boring, and needlessly hard to debug. I convinced myself that
  I&amp;#8217;d never ever use it.&lt;/p&gt;
&lt;h1&gt;Where did it all go wrong?&lt;/h1&gt;
&lt;p&gt;This section is not about my life in general, or about why I had to (finally) use C/C++. This
  is about the question that I asked myself the most while debugging my C/C++ programs.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Where did the segfault occur? Till where was the program successful? Where did it all go wrong?&lt;/i&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;incrementPtrIncreaseValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incrementPtrIncreaseValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a program in which the function &lt;code&gt;incrementPtrIncreaseValue&lt;/code&gt; is supposed to increment
  the pointer passed to it, and increase the &lt;i&gt;value&lt;/i&gt; stored at the pointed location by &lt;code&gt;n&lt;/code&gt;. Then,
  we make an array &lt;code&gt;x = {0 ... 19}&lt;/code&gt; and loop over it, intending to increment every element.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t know why you&amp;#8217;d write anything like it, but there&amp;#8217;s more &amp;#8211; this is incorrect. [0]&lt;/p&gt;
&lt;p&gt;To increment the pointer, &lt;code&gt;*p += 1&lt;/code&gt; is (correctly) used. However, to change the value, you need
  to use &lt;code&gt;**p&lt;/code&gt;, and in this case, since we&amp;#8217;ve used &lt;code&gt;*p&lt;/code&gt;, the &lt;i&gt;pointer&lt;/i&gt; is accidentally incremented by &lt;i&gt;n + 1&lt;/i&gt; and the value
  is unchanged.&lt;/p&gt;
&lt;p&gt;On an initial run, the program will work as expected - to test it out, you put &lt;code&gt;n = 0&lt;/code&gt;, so you didn&amp;#8217;t notice
  any issues with it. However, then you decide to increment by 10, and behold the output that follows (your mileage may vary a bit):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;i&gt;Ughh, the first element seems to be correct&lt;/i&gt;, you think, &lt;i&gt;where did I go wrong?&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;And to verify that your program is indeed totally and completely wrong, you replace 10 with a -2. (Again, your mileage may vary).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;segmentation fault (core dumped)  ./executable_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;#8217;d probably be thinking that this particular error is rather trivial to fix &amp;#8211; and indeed, it is, but if there&amp;#8217;s also a lot of other code
  lying around, it is extremely hard to isolate the source of the error.&lt;/p&gt;
&lt;p&gt;[0] Please don&amp;#8217;t point out that I&amp;#8217;ve not included any standard libraries, even though it affects line numbering later. Deal with it, it&amp;#8217;s a non-issue.&lt;/p&gt;
&lt;h1&gt;&lt;code&gt;printf&lt;/code&gt; and copy-paste&lt;/h1&gt;
&lt;p&gt;My old go-to method for dealing with such errors was adding a bunch of &lt;code&gt;printf&lt;/code&gt; statements to the code, which would
  typically look like this: [1]&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Reached uptill [linenum], with **ptr = %d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These would be littered in huge numbers around the lines I was suspicious of. Often, I would need to add these
  manually, since the content of the &lt;code&gt;printf&lt;/code&gt; statements would often depend on the statement preceding it.&lt;/p&gt;
&lt;p&gt;I think that anyone can understand why this is tedious, and why I perceived it as being difficult. I would often rewrite
  the whole code instead of trying to debug a segfault.&lt;/p&gt;
&lt;p&gt;[1] Observant readers will note that the code below is not well suited for cases where there is a crash, like a segfault,
  because &lt;code&gt;printf&lt;/code&gt; may cause the output to be &amp;#8216;buffered&amp;#8217; unless &lt;code&gt;fflush(stdout)&lt;/code&gt; is called or a &lt;code&gt;\n&lt;/code&gt; is encountered. I&amp;#8217;ve kept it like
  this deliberately since I often had troubles with this when I was starting off.&lt;/p&gt;
&lt;h1&gt;Enter &lt;code&gt;gdb&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;To actually use &lt;code&gt;gdb&lt;/code&gt;, you need to compile your program with &amp;#8216;debug symbols&amp;#8217;. Without those, &lt;code&gt;gdb&lt;/code&gt; cannot be very effective.
  This is because there&amp;#8217;s a lot of information that&amp;#8217;s lost while compiling, for instance, what memory location corresponds
  to what variable, and what line number in your source file corresponds to the code running in the executable.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gcc -g faultycode.c -o executable_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;-g&lt;/code&gt; flag takes care of the debug symbols. I also recommend that &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html&quot;&gt;optimizations&lt;/a&gt; be minimized during the compilation using the
  &lt;code&gt;-O0&lt;/code&gt; or &lt;code&gt;Og&lt;/code&gt; flag [2], since the compiler often decides that certain statements, like &lt;code&gt;x = x&lt;/code&gt; do not have any side effects, or certain variables
  are not needed (all those convenience variables we make to improve clarity of our code), and also &lt;a href=&quot;https://en.wikipedia.org/wiki/Inline_function&quot;&gt;inlines&lt;/a&gt; some functions. So, you can use
  either of the following statements.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gcc -g -O0 faultycode.c -o executable_name
$ gcc -g -Og faultycode.c -o executable_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now, you&amp;#8217;re ready to start &lt;code&gt;gdb&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb ./executable_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[2] In certain cases, you might encounter an issue that is present &lt;i&gt;only&lt;/i&gt; in the optimized version, and the unoptimized version
  works fine. In such a case, this will not hold. I&amp;#8217;ve never been a victim of this, however, I&amp;#8217;ve often been a victim of the
  &lt;code&gt;$n = &amp;lt;optimized out&amp;gt;&lt;/code&gt; message which is printed out when a variable has been deemed unworthy by the compiler, so I stick to my
  idea of using the unoptimizing flags.&lt;/p&gt;
&lt;h1&gt;&lt;code&gt;break faultycode.c:11&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;What I do after this point is use something called a breakpoint. It&amp;#8217;s exactly what it sounds like - you can tell
  the program to stop executing when you encounter a particular line or function, and then you can&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Execute program line-by-line, to find out exactly &lt;i&gt;where did it all go wrong&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;Print values of any symbol in range&lt;/li&gt;
  &lt;li&gt;Print the stack trace&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And a lot more! But I&amp;#8217;ll focus on the first and the second one.&lt;/p&gt;
&lt;p&gt;Breakpoints can be set by line numbers, function names, and &lt;a href=&quot;ftp://ftp.gnu.org/old-gnu/Manuals/gdb/html_node/gdb_28.html#SEC29&quot;&gt;a lot more.&lt;/a&gt; Let&amp;#8217;s set a breakpoint on the 11&lt;sup&gt;th&lt;/sup&gt; line of faultycode.c,
  and then start the program execution using &lt;code&gt;run&lt;/code&gt; (assume &lt;code&gt;n&lt;/code&gt; = 10 for this example).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt; faultycode.c:11
Breakpoint &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; at 0xXXX: file faultycode.c, line &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; run
Breakpoint &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, main &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; at faultycode.c:11
&lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;	    printf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;, *&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ptr - &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that the breakpoint has been set, you can print anything.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; print *&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ptr - &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; print *&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ptr&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;ptr&lt;/code&gt; should be pointing to &lt;code&gt;x[1]&lt;/code&gt; at this moment, and the value should be 1. The value at &lt;code&gt;x[0]&lt;/code&gt; or &lt;code&gt;ptr - 1&lt;/code&gt; should
  be 10. On printing &lt;code&gt;*(ptr - 1)&lt;/code&gt;, we realize that the value is indeed 10, but printing &lt;code&gt;*ptr&lt;/code&gt;, we get 11, instead of the 1 that
  we expect. Is the pointer wrong somehow? Let&amp;#8217;s see, it &lt;code&gt;ptr - 1&lt;/code&gt; should be the same as &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; print x
&lt;span class=&quot;nv&quot;&gt;$n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int *&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 0x555555756010
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; print ptr
&lt;span class=&quot;nv&quot;&gt;$n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int *&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 0x55555575603c
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Subtracting, we see that they differ by 40! How is that possible? &lt;code&gt;sizeof(int)&lt;/code&gt; is 4, so the pointer hex values differing by 40 means that
  they point to integers which are 40/4 = 10 memory locations apart. Indeed, when you print &lt;code&gt;ptr - 11&lt;/code&gt; you see that it is the same as &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, it seems like we have discovered the root of our problem: &lt;code&gt;ptr&lt;/code&gt; is incremented incorrectly somewhere. But, &lt;code&gt;incrementPtrIncreaseValue&lt;/code&gt; is the
  only place where we actually change that. So, let&amp;#8217;s step through that code and try to find out what is wrong. First, let&amp;#8217;s set a breakpoint on
  &lt;code&gt;incrementPtrIncreaseValue&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt; incrementPtrIncreaseValue
Breakpoint &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; at 0xXXX: file faultycode.c, line &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Recall that currently, we are at a breakpoint, so program execution is halted. To start the program from where we stopped, &lt;code&gt;continue&lt;/code&gt; is used.
  Soon enough, the program will stop at the function, helpfully printing the parameters passed to it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Breakpoint &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;, incrementPtrIncreaseValue &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x7fffffffe608, &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at faultycode.c:2
&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;	  *p &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;*p&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; + n&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#8217;m sure that the problem will be clear enough at this point, so that you can correct it. If not, then the following commands will help:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) print *p
$n = (int *) 0x55555575603c
(gdb) step
3	  *p += 1;
(gdb) print *p
$n = (int *) 0x555555756064
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#8217;ll explain what happens - you stop &lt;i&gt;before&lt;/i&gt; executing the 2&lt;sup&gt;nd&lt;/sup&gt; line, and you print the value of &lt;code&gt;*p&lt;/code&gt;. Using &lt;code&gt;step&lt;/code&gt; [3] causes the execution
  of one line, so line 2 is executed, and you stop &lt;i&gt;before&lt;/i&gt; the execution of line 3. So, you can print &lt;code&gt;*p&lt;/code&gt; after the execution of line 2,
  and the error becomes clear on comparing the addresses. This step was not required in this case, since the error was easy to see, but
  you might be calling some function in line 2, which might have a long and convoluted way of modifying &lt;code&gt;p&lt;/code&gt;. In those cases, &lt;code&gt;step&lt;/code&gt; ping through
  the code is much easier.&lt;/p&gt;
&lt;p&gt;[3] In this case, &lt;code&gt;next&lt;/code&gt; would be equivalent to &lt;code&gt;step&lt;/code&gt; but the &lt;a href=&quot;https://sourceware.org/gdb/onlinedocs/gdb/Continuing-and-Stepping.html&quot;&gt;difference is really worth knowing.&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Go, Debug&lt;/h1&gt;
&lt;p&gt;I repeat again, &lt;b&gt;this is not a guide&lt;/b&gt;. Please see &lt;a href=&quot;https://sourceware.org/gdb/onlinedocs/gdb/Continuing-and-Stepping.html&quot;&gt;this comprehensive guide&lt;/a&gt;, or use &lt;code&gt;(gdb) help&lt;/code&gt; while inside &lt;code&gt;gdb&lt;/code&gt;, or &lt;a href=&quot;https://web.stanford.edu/class/cs107/guide_gdb.html&quot;&gt;this short guide.&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">What this is not: a complete guide to gdb. There are plenty of those online. This is primarily an opinion/experience piece on why I find gdb to be essential. There is some usage instruction, but that is to enable anyone to follow along.</summary></entry><entry><title type="html">NPC Name Generator</title><link href="/www/2017/06/01/NPC_name_generator.html" rel="alternate" type="text/html" title="NPC Name Generator" /><published>2017-06-01T00:00:00+05:30</published><updated>2017-06-01T00:00:00+05:30</updated><id>/www/2017/06/01/NPC_name_generator</id><content type="html" xml:base="/www/2017/06/01/NPC_name_generator.html">&lt;h1&gt;On NPC Names&lt;/h1&gt;
&lt;p&gt;An NPC, or a non-playing character in a computer or role-playing game is a character controlled by the game, who helps set the scene and progress the story. I&amp;#8217;ll be addressing NPCs which are a part of sci-fi or fantasy games. In my opinion, these NPCs should have names that deviate enough from regular, run-of-the-mill, &amp;#8220;Earthly&amp;#8221; names, and impart an unfamiliar and exotic feel to the setting. However, they should not have names which are contrived and do not have a realistic mouthfeel, like &amp;#8220;Tchu&amp;#8217;quixthal&amp;#8221;, or be too generic, like &amp;#8220;The Wise Sage&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Diablo 2 is a game that gets it right in my opinion. Some examples are: Gheed, Akara, Charsi, Jerhyn.&lt;/p&gt;
&lt;p&gt;Now, the challenge here is to come up with names which are different, yet similar to &amp;#8220;Earthly&amp;#8221; names. My idea is to take a &amp;#8220;seed&amp;#8221; name, and generate variants of it to come up with NPC names. The inspiration for this derives from Isaac Asimov&amp;#8217;s &lt;i&gt;Caves of Steel&lt;/i&gt;, in which there is a character called &lt;i&gt;Daneel&lt;/i&gt;, whose name is similar enough to &lt;i&gt;Daniel&lt;/i&gt;, but yet exotic enough (for my tastes, at least!).&lt;/p&gt;
&lt;h1&gt;Generating Random Names&lt;/h1&gt;
&lt;p&gt;It&amp;#8217;s easy to generate random names of a particular length. Let&amp;#8217;s assume that it&amp;#8217;s also possible to rate names based on their closeness to another name. This rating is called the &lt;b&gt;score&lt;/b&gt;.  Using these two facts, and something called a genetic algorithm, I can come up with generated NPC names, and here&amp;#8217;s how:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Decide a &amp;#8220;seed&amp;#8221; name manually.&lt;/li&gt;
  &lt;li&gt;Generate a large number of random names with lengths close to the &amp;#8220;seed&amp;#8221; name.&lt;/li&gt;
  &lt;li&gt;Apply the genetic algorithm (explained below) to create a new list of names from the previous list.&lt;/li&gt;
  &lt;li&gt;Find out the &lt;b&gt;score&lt;/b&gt; of all names in the list to the &amp;#8220;seed&amp;#8221; name.&lt;/li&gt;
  &lt;li&gt;If we have a sufficient number of names whose &lt;b&gt;score&lt;/b&gt; is (say) above 0.9, print them, else repeat from 3.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given a list, a genetic algorithm drives us towards another list, which has an overall &lt;b&gt;score&lt;/b&gt; better than the current one, and it is the actual &amp;#8220;magic&amp;#8221; behind how the names are generated.&lt;/p&gt;
&lt;p&gt;A genetic algorithm is based loosely on how evolution works: the survival of the fittest.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Each animal in a &lt;b&gt;population&lt;/b&gt; has a &lt;b&gt;fitness&lt;/b&gt;.&lt;/li&gt;
  &lt;li&gt;Two (or more) animals can &lt;b&gt;mate&lt;/b&gt; to produce an offspring. Higher &lt;b&gt;fitness&lt;/b&gt; means that there is a higher chance that the animal will survive and &lt;b&gt;mate&lt;/b&gt;.&lt;/li&gt;
  &lt;li&gt;Each animal can also have a &lt;b&gt;mutation&lt;/b&gt; while producing offspring. This &lt;b&gt;mutation&lt;/b&gt; can be both good or bad in terms of how it affects the &lt;b&gt;fitness&lt;/b&gt; of the offspring.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our scenario, the correspondence is such:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;population&lt;/b&gt; is the list of  names at the current moment.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;mating&lt;/b&gt; is the process of generating a new population of the same size based on the current one. The actual mating process is based on combination of names. For instance, &amp;#8220;milind&amp;#8221; and &amp;#8220;luthra&amp;#8221; can generate &amp;#8220;mi-thra&amp;#8221;, &amp;#8220;mil-hra&amp;#8221;, &amp;#8220;mili-ra&amp;#8221; and so on: the prefix of the generated name comes from the first name, and the suffix comes from the second name. If a name has a larger score, then it will contribute to more prefixes and suffixes in the new population.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;mutation&lt;/b&gt; is the process of random changes in a name, so &amp;#8220;milind&amp;#8221; can mutate to &amp;#8220;nilind&amp;#8221;. This is necessary because we can sometimes reach a &amp;#8220;plateau&amp;#8221; where no amount of mating can produce a better score. The probability of mutation is very low.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are interested in genetic algorithms and their implementation, &lt;a href=&quot;https://en.wikipedia.org/wiki/Genetic_algorithm&quot;&gt;read the wikipedia page&lt;/a&gt; and then try doing &lt;a href=&quot;https://www.codewars.com/kata/binary-genetic-algorithms/javascript&quot;&gt;this question&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Scoring Random Names&lt;/h1&gt;
&lt;p&gt;We&amp;#8217;ve used &lt;b&gt;score&lt;/b&gt; above as a measure of how close a name is to the &amp;#8220;seed&amp;#8221; name, but we&amp;#8217;ve not discussed how to actually do this. A usual way of doing this is counting changes (number of additions, alterations and deletions needed to make the names same). I&amp;#8217;ve done something similar, using &lt;i&gt;alignments&lt;/i&gt;. I generate all the &lt;i&gt;alignments&lt;/i&gt; of the two names and to score the best one.&lt;/p&gt;
&lt;p&gt;What is an alignment?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;m i l i n d
+ | | | | |
n i l i n d
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The alignment above attempts to align &amp;#8220;milind&amp;#8221; to &amp;#8220;nilind&amp;#8221;. The &lt;code&gt;|&lt;/code&gt; denotes a &lt;i&gt;match&lt;/i&gt;, while the &lt;code&gt;+&lt;/code&gt; denotes a &lt;i&gt;mismatch&lt;/i&gt;. A &lt;i&gt;mismatch&lt;/i&gt; roughly hints towards an alteration.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;m i l i n d
| _ | | | |
m   l i n d
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The alignment above attempts to align &amp;#8220;milind&amp;#8221; to &amp;#8220;mlind&amp;#8221;. The &lt;code&gt;|&lt;/code&gt; denotes a &lt;i&gt;match&lt;/i&gt;, while the &lt;code&gt;_&lt;/code&gt; denotes a &lt;i&gt;gap&lt;/i&gt;. A &lt;i&gt;gap&lt;/i&gt; roughly hints towards an addition or a deletion.&lt;/p&gt;
&lt;p&gt;There can be many alignments for any two names. For instance, for &amp;#8220;mil&amp;#8221; and &amp;#8220;lul&amp;#8221;, all the three alignments given below are valid.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;m i l
_ _ | _ _
    l u l
score: -3

m i l
+ + |
l u l
score: 2

m i l
_ + + _
  l u l
score: -1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each of these alignments is assigned a score. For each &lt;i&gt;match&lt;/i&gt;, an alignment is given 1 point. For each &lt;i&gt;mismatch&lt;/i&gt;, an alignment is given 0.5 points, and for each &lt;i&gt;gap&lt;/i&gt;, an alignment is given -1 points. We calculate the score for all possible alignments, and choose the one with the best score. In the case above, it would be the second one.&lt;/p&gt;
&lt;p&gt;This method causes longer names to have better scores than smaller ones, because they simply have more matches. To remove the effect of name length on the score, we divide the best score by the length of the name.&lt;/p&gt;
&lt;p&gt;Thus, the score we talked about is defined as:&lt;/p&gt;
&lt;p&gt;$$ score = \frac{BestAlignmentScore(\text{name},\text{seed})}{\text{name}.length} $$&lt;/p&gt;
&lt;p&gt;Actually - that is not one hundred percent true, I&amp;#8217;ve simplified it a bit above.&lt;/p&gt;
&lt;p&gt;Firstly, I don&amp;#8217;t match names written down using the letters of the English alphabet. Instead, I use names written down using the &lt;a href=&quot;https://en.wikipedia.org/wiki/International_Phonetic_Alphabet&quot;&gt;International Phonetic Alphabet&lt;/a&gt; (IPA). In the English alphabet, the way we &lt;i&gt;write&lt;/i&gt; something and the way we &lt;i&gt;say&lt;/i&gt; it is quite different, and I aim to produce similar &lt;i&gt;sounding&lt;/i&gt; names. The IPA provides an easy, comprehensive way to represent how a word should be spoken out loud. At the same time, the IPA uses a rather large set of symbols, like &amp;#8216;…≥&amp;#8217; and &amp;#8216;Œ∏&amp;#8217; and so on. I have used ASCII representations instead, as described in this &lt;a href=&quot;http://www.antimoon.com/resources/phonchart2008.pdf&quot;&gt;very useful document&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Secondly, the &lt;i&gt;mismatch&lt;/i&gt; score is not a constant. Consider the two mismatches - (&lt;i&gt;a:&lt;/i&gt; as in &lt;i&gt;arm&lt;/i&gt;, &lt;i&gt;e:&lt;/i&gt; as in &lt;i&gt;turn&lt;/i&gt;) and (&lt;i&gt;a:&lt;/i&gt; as in arm, and &lt;i&gt;l&lt;/i&gt; as in &lt;i&gt;leg&lt;/i&gt;). The first pair consists of similar sounding vowels, while the second pair consists of one vowel and one consonant, which sound very different. Thus, the first pair gets a larger &lt;i&gt;mismatch&lt;/i&gt; score. The entire scheme of mismatch scores is decided by &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1ZIsQbYccrpIz5iQXhU5XiEqSQkMNy888-vJO9vlvE98/edit?usp%3Dsharing&quot;&gt;this grid I came up  with&lt;/a&gt;. The gap score is also smaller, around -0.15 by default.&lt;/p&gt;
&lt;p&gt;Thirdly, the name and the &amp;#8220;seed&amp;#8221; might have different lengths. In particular, for a &amp;#8220;seed&amp;#8221; of length 6, the name might be 5-7 characters long. Thus, the final score definition actually looks somewhat different:&lt;/p&gt;
&lt;p&gt;$$ score = \frac{BestAlignmentScore(\text{name},\text{seed})}{Mean(\text{name}.length, \text{seed}.length)} $$&lt;/p&gt;
&lt;p&gt;The algorithm that finds the best alignment is mostly the same as the &lt;a href=&quot;Needleman-Wunsch%20Algorithm&quot;&gt;Needleman-Wunsch Algorithm&lt;/a&gt;, which is used to align protein sequences.&lt;/p&gt;
&lt;h1&gt;NPC-Name Generator in Action&lt;/h1&gt;
&lt;p&gt;This is an example run of the generator.
  Please feel free to try it out yourself at https://github.com/milindl/NPC-name&lt;/p&gt;
&lt;p&gt;Seed name: d ei v i d (DAVID)
  Generated names:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;d ei o: i d (DAOUID) (DAY - OO - EE - D)&lt;/li&gt;
  &lt;li&gt;d ei v i TH (DAVITH)&lt;/li&gt;
  &lt;li&gt;d ei v TH (DAVTH) (pretty much useless)&lt;/li&gt;
  &lt;li&gt;d ei v i e:(r) (DAVIER)&lt;/li&gt;
  &lt;li&gt;TH ei v i (THAYVI) (TH as in THIN)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clearly, not all of them are useable, but they&amp;#8217;re not useless either.&lt;/p&gt;
&lt;h1&gt;Future Work&lt;/h1&gt;
&lt;h2&gt;Asymmetric Grid&lt;/h2&gt;
&lt;p&gt;Currently, the grid used to score mismatches is symmetric. Thus, &lt;i&gt;a:&lt;/i&gt; turning to &lt;i&gt;e:&lt;/i&gt; is as likely as &lt;i&gt;e:&lt;/i&gt; turning to &lt;i&gt;a:&lt;/i&gt;. However, by changing this, I can model the flow of time. For instance, I want to model that over time, both the &lt;i&gt; í&lt;/i&gt; (as in &lt;i&gt;pleaSure&lt;/i&gt;) and &lt;i&gt;z&lt;/i&gt; (as in &lt;i&gt;zoo&lt;/i&gt;) sounds being replaced with &lt;i&gt;z&lt;/i&gt;. In this case, I can make it more likely for &lt;i&gt; í&lt;/i&gt; sound to change into &lt;i&gt;z&lt;/i&gt; than the other way around. This way, I can probably look at how a word changes over time.&lt;/p&gt;
&lt;h2&gt;Accurate Grid&lt;/h2&gt;
&lt;p&gt;Right now, the grid is based on me saying some words and comparing how similar they sound to me. Instead, I should base my grid &lt;a href=&quot;https://en.wikipedia.org/wiki/International_Phonetic_Alphabet#Consonants&quot;&gt;off this chart&lt;/a&gt;, which could help me describe the closeness of two symbols based on phonetic properties.&lt;/p&gt;
&lt;h2&gt;Neighboring-Letter Based Alignment&lt;/h2&gt;
&lt;p&gt;Certain letters occur together more often than not, and my program does not take that into account while computing alignment scoring. Thus, the alignment scores should depend not only on the letter, but also its neighboring letters.&lt;/p&gt;</content><author><name></name></author><summary type="html">On NPC Names</summary></entry><entry><title type="html">First Post</title><link href="/www/2017/05/31/test_post.html" rel="alternate" type="text/html" title="First Post" /><published>2017-05-31T00:00:00+05:30</published><updated>2017-05-31T00:00:00+05:30</updated><id>/www/2017/05/31/test_post</id><content type="html" xml:base="/www/2017/05/31/test_post.html">&lt;p&gt;The main purpose of this post was to check styles and make sure that org-mode is working,
  and any scripts I use for posting run alright.&lt;/p&gt;
&lt;p&gt;It has no real content, so there&amp;#8217;s no point to reading it, but thanks anyway.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re really interested in knowing who gets the Iron Throne, I would bet my dollar on the bastards.&lt;/p&gt;</content><author><name></name></author><summary type="html">The main purpose of this post was to check styles and make sure that org-mode is working, and any scripts I use for posting run alright.</summary></entry></feed>